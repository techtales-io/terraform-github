---
name: "terraform"

# set events for job to trigger from
on:
  pull_request:
  push: { branches: [main] }

jobs:
  terraform:
    # set permissions for job
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    # set runner for job to run on
    runs-on:
      - self-hosted
      - home-infra

    # set envs available to all steps
    env:
      working-directory: terraform
      TF_IN_AUTOMATION: true

    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Checkout code
        uses: actions/checkout@v3

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # SETUP STUFF
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      # https://github.com/marketplace/actions/sops-binary-installer
      - name: Setup SOPS
        uses: mdgreenwald/mozilla-sops-action@v1.3.0
        with:
          version: latest

      # for terraform fmt
      # https://github.com/marketplace/actions/setup-node-js-environment
      - name: Setup Node.js
        uses: actions/setup-node@v3.5.1
        with:
          node-version: 18

      # https://github.com/marketplace/actions/hashicorp-setup-terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # AUTHENTICATE KMS SA AND ADD SECRETS TO ENV
      # note: TF_VAR_github_token is set here for github provider auth to not conflict with CI token stored in GITHUB_TOKEN
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      # https://github.com/marketplace/actions/authenticate-to-google-cloud
      - name: Authenticate to Google Cloud
        id: auth
        uses: "google-github-actions/auth@v1.0.0"
        with:
          workload_identity_provider: "${{ secrets.GH_WORKLOAD_IDENTITY_PATH }}"
          service_account: "${{ secrets.GH_ACTION_KMS_SA }}"
          export_environment_variables: false

      - name: Add Google credentials to env
        id: auth-cred
        shell: bash
        run: |
          echo GOOGLE_APPLICATION_CREDENTIALS="${{ steps.auth.outputs.credentials_file_path }}" >> $GITHUB_ENV

      - name: Decrypt secrets
        shell: bash
        run: sops --decrypt secrets.sops.yaml > secrets.yaml

      - name: Add secrets to ENV
        shell: bash
        run: |
          AWS_S3_ENDPOINT=$(sed -n 's/^AWS_S3_ENDPOINT: //p' secrets.yaml)
          echo "::add-mask::$AWS_S3_ENDPOINT"
          echo AWS_S3_ENDPOINT=$AWS_S3_ENDPOINT >> $GITHUB_ENV
          AWS_REGION=$(sed -n 's/^AWS_REGION: //p' secrets.yaml)
          echo "::add-mask::$AWS_REGION"
          echo AWS_REGION=$AWS_REGION >> $GITHUB_ENV
          AWS_ACCESS_KEY_ID=$(sed -n 's/^AWS_ACCESS_KEY_ID: //p' secrets.yaml)
          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> $GITHUB_ENV
          AWS_SECRET_ACCESS_KEY=$(sed -n 's/^AWS_SECRET_ACCESS_KEY: //p' secrets.yaml)
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
          echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> $GITHUB_ENV
          TF_VAR_github_owner=$(sed -n 's/^TF_VAR_github_owner: //p' secrets.yaml)
          echo "::add-mask::$TF_VAR_github_owner"
          echo TF_VAR_github_owner=$TF_VAR_github_owner >> $GITHUB_ENV
          TF_VAR_github_token=$(sed -n 's/^TF_VAR_github_token: //p' secrets.yaml)
          echo "::add-mask::$TF_VAR_github_token"
          echo TF_VAR_github_token=$TF_VAR_github_token >> $GITHUB_ENV

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # PERFORM TERRASCAN
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      # https://github.com/marketplace/actions/terrascan-iac-scanner
      - name: Run Terrascan
        uses: tenable/terrascan-action@v1.4.1
        with:
          iac_type: "terraform"
          iac_version: "v14"
          policy_type: "github"
          only_warn: true

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # PERFORM TERRAFORM FMT AND POST OUTCOME
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform fmt output
        run: echo ${{steps.fmt.outcome}}

      # https://github.com/marketplace/actions/terraform-pr-commenter
      - name: Post fmt outcome
        if: always() && github.ref != 'refs/heads/main' && (steps.fmt.outcome == 'success' || steps.fmt.outcome == 'failure')
        uses: robburger/terraform-pr-commenter@v1.5.0
        with:
          commenter_type: fmt
          commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
          commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # PERFORM TERRAFORM INIT AND POST OUTCOME
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: Terraform init
        id: init
        run: terraform init

      # https://github.com/marketplace/actions/terraform-pr-commenter
      - name: Post init outcome
        if: always() && github.ref != 'refs/heads/main' && (steps.init.outcome == 'success' || steps.init.outcome == 'failure')
        uses: robburger/terraform-pr-commenter@v1.5.0
        with:
          commenter_type: init
          commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
          commenter_exitcode: ${{ steps.init.outputs.exitcode }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # PERFORM TERRAFORM VALIDATE AND POST OUTCOME
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: Terraform validate
        id: validate
        run: terraform validate

      # https://github.com/marketplace/actions/terraform-pr-commenter
      - name: Post validate outcome
        if: always() && github.ref != 'refs/heads/main' && (steps.validate.outcome == 'success' || steps.validate.outcome == 'failure')
        uses: robburger/terraform-pr-commenter@v1.5.0
        with:
          commenter_type: validate
          commenter_input: ${{ format('{0}{1}', steps.validate.outputs.stdout, steps.validate.outputs.stderr) }}
          commenter_exitcode: ${{ steps.validate.outputs.exitcode }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # PERFORM TERRAFORM PLAN AND POST OUTCOME
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: Terraform plan
        id: plan
        run: terraform plan -out workspace.plan

      # https://github.com/marketplace/actions/terraform-pr-commenter
      - name: Post plan outcome
        if: always() && github.ref != 'refs/heads/main' && (steps.plan.outcome == 'success' || steps.plan.outcome == 'failure')
        uses: robburger/terraform-pr-commenter@v1.5.0
        with:
          commenter_type: plan
          commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
          commenter_exitcode: ${{ steps.plan.outputs.exitcode }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # PERFORM TERRAFORM APPLY
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: Terraform apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply workspace.plan
